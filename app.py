# app.py
import os, unicodedata, threading, logging
from flask import Flask, jsonify
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from waitress import serve

# ===================== –ù–ê–°–¢–†–û–ô–ö–ò =====================
CORRECT_ANSWER = "–Ø –±—ã–≤–∞–ª –∑–¥–µ—Å—å, —è –±—ã–≤–∞–ª —Ç–∞–º –∏ –±—ã–≤–∞–ª –≥–¥–µ-—Ç–æ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ"
SECRET_FILE = "prize_secret.jpg"
SUCCESS_CAPTION = "–ü—Ä–æ—á—Ç–∏ —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ. –û–¥–Ω–∞ –∑–Ω–∞–º–µ–Ω–∏—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –±—ã–≤–∞–µ—Ç –ø–æ–ª–µ–∑–Ω–æ –ß–ò–¢–ê–¢–¨ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ"
PORT = int(os.environ.get("PORT", "10000"))
# =====================================================

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

def normalize(text: str) -> str:
    return unicodedata.normalize("NFKC", (text or "")).casefold().strip()

# ====== Telegram handlers ======
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø —Å–æ–±–∞–∫–æ. –Ø –∂–¥—É –æ—Ç–≤–µ—Ç./help –¥–ª—è –æ—á–µ–Ω—å –≥–ª—É–ø—ã—Ö")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –±–µ–∑ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ.–°–æ–±–∞–∫–æ –∂–¥–µ—Ç.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if normalize(text) == normalize(CORRECT_ANSWER):
        try:
            with open(SECRET_FILE, "rb") as f:
                await update.message.reply_document(document=f, caption=SUCCESS_CAPTION)
        except FileNotFoundError:
            logging.error("SECRET_FILE not found: %s", SECRET_FILE)
            await update.message.reply_text("–§–∞–π–ª –ø—Ä–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ üòï")
    else:
        await update.message.reply_text("–ü–æ –ø—É—Å—Ç—è–∫–∞–º –°–æ–±–∞–∫–æ –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç")

def build_bot_app() -> Application:
    token = os.environ.get("TELEGRAM_TOKEN")
    if not token:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞ –≤ —Å—Ä–µ–¥–µ Render.")
    # –¥–ª—è –ª–æ–≥–æ–≤ –Ω–µ –ø–µ—á–∞—Ç–∞–µ–º —Ü–µ–ª–∏–∫–æ–º —Ç–æ–∫–µ–Ω
    logging.info("Starting Telegram bot with token prefix: %s***", token[:10])
    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    return app

def run_bot():
    # —Å–æ–∑–¥–∞—ë–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π –¥–ª—è –ø–æ–±–æ—á–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –∏ –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –µ–≥–æ
    import asyncio
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)

    logging.info("BOT: building application‚Ä¶")
    application = build_bot_app()

    logging.info("BOT: starting polling‚Ä¶")
    # —Ç–µ–ø–µ—Ä—å –≤ –ø–æ—Ç–æ–∫–µ –µ—Å—Ç—å event loop, –∏ run_polling –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    application.run_polling(
        allowed_updates=Update.ALL_TYPES,
        stop_signals=None,          # –º—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ‚Äî —Å–∏–≥–Ω–∞–ª—ã –ª–æ–≤–∏—Ç—å –Ω–µ–ª—å–∑—è
        drop_pending_updates=True,
        poll_interval=1.0,
        timeout=10,
    )
    logging.info("BOT: polling stopped.")

        # –•—É–∫ –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
        application.post_init = _before_start  # –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –¥–æ run_polling()

        logging.info("BOT: starting polling‚Ä¶")
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            stop_signals=None,              # –º—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ‚Äî —Å–∏–≥–Ω–∞–ª—ã –ª–æ–≤–∏—Ç—å –Ω–µ–ª—å–∑—è
            drop_pending_updates=True,
            poll_interval=1.0,
            timeout=10,
        )
        logging.info("BOT: polling stopped.")
    except Exception as e:
        logging.exception("BOT THREAD CRASHED: %s", e)

# ====== Flask (–ø–∏–Ω–≥–∏ –æ—Ç –∞–ø—Ç–∞–π–º-–º–æ–Ω–∏—Ç–æ—Ä–∞) ======
web = Flask(__name__)

@web.get("/")
def root():
    return "ok", 200

@web.get("/ping")
def ping():
    return jsonify({"status": "ok"}), 200

if __name__ == "__main__":
    # –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ –∏ HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è /ping
    t = threading.Thread(target=run_bot, daemon=True, name="run_bot")
    t.start()
    logging.info("WEB: starting waitress on port %s", PORT)
    serve(web, host="0.0.0.0", port=PORT)
