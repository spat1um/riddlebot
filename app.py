import os, unicodedata, threading, asyncio, logging
from flask import Flask, jsonify
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters

# ====== –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ======
CORRECT_ANSWER = "–Ø –±—ã–≤–∞–ª –∑–¥–µ—Å—å, —è –±—ã–≤–∞–ª —Ç–∞–º –∏ –±—ã–≤–∞–ª –≥–¥–µ-—Ç–æ –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ"
SECRET_FILE = "prize_secret.jpg"
SUCCESS_CAPTION = "–ü—Ä–æ—á—Ç–∏ —Ö–æ—Ä–æ—à–µ–Ω—å–∫–æ. –û–¥–Ω–∞ –∑–Ω–∞–º–µ–Ω–∏—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –±—ã–≤–∞–µ—Ç –ø–æ–ª–µ–∑–Ω–æ –ß–ò–¢–ê–¢–¨ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ"

def normalize(text: str) -> str:
    return unicodedata.normalize("NFKC", (text or "")).casefold().strip()

# === Telegram bot ===
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø —Å–æ–±–∞–∫–æ. –Ø –∂–¥—É –æ—Ç–≤–µ—Ç.help –¥–ª—è –æ—á–µ–Ω—å –≥–ª—É–ø—ã—Ö")

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–¢–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –±–µ–∑ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ.–°–æ–±–∞–∫–æ –∂–¥–µ—Ç.")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or ""
    if normalize(text) == normalize(CORRECT_ANSWER):
        try:
            with open(SECRET_FILE, "rb") as f:
                await update.message.reply_document(document=f, caption=SUCCESS_CAPTION)
        except FileNotFoundError:
            await update.message.reply_text("–§–∞–π–ª –ø—Ä–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ üòï")
    else:
        await update.message.reply_text("–ü–æ –ø—É—Å—Ç—è–∫–∞–º –°–æ–±–∞–∫–æ –Ω–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç")

def build_bot_app() -> Application:
    token = os.environ.get("TELEGRAM_TOKEN")
    if not token:
        raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞.")
    app = Application.builder().token(token).build()
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    return app

def run_bot():
    # –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–ª—è asyncio-–±–æ—Ç–∞
    logging.basicConfig(level=logging.INFO)
    application = build_bot_app()
    asyncio.run(application.run_polling(allowed_updates=Update.ALL_TYPES))

# === Flask web (–¥–ª—è –ø–∏–Ω–≥–æ–≤) ===
web = Flask(__name__)

@web.get("/")
def root():
    return "ok", 200

@web.get("/ping")
def ping():
    return jsonify({"status": "ok"}), 200

if __name__ == "__main__":
    # –ª–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫: —Å–Ω–∞—á–∞–ª–∞ –±–æ—Ç, –∑–∞—Ç–µ–º Flask
    t = threading.Thread(target=run_bot, daemon=True)
    t.start()
    web.run(host="0.0.0.0", port=int(os.environ.get("PORT", "10000")))
